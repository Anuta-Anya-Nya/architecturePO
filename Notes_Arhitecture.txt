Архитектура ПО - совокупность важнейших решений об организации программной системы
	
	выбор структурный элементов системы и их интерфейсов, поведение при их взаимодействии
соединение выбранных элементов структуры 
общий аритектурный стиль
организация отдельных программных систем
комбинация аппаратного и ПО(системная архитектура)
организация информационных технологий в компаниях

Архитектура — это базовая организация системы, 
воплощённая в её компонентах, их отношениях между 
собой и с окружением, а также принципы, 
определяющие проектирование и развитие системы - — Стандарт IEEE 1471-2000

Типы архитектуры в IT-индустрии 
Business - Бизнес
Process - Процесс
Enterprise - Предприятие
Solution - Решение
Application - Приложение
System - Система


Жизненный цикл ПО – это непрерывный 
процесс, который начинается с момента 
принятия решения о необходимости его 
создания и заканчивается в момент его 
полного изъятия из эксплуатации. 

Организация проектов 
Rational Unified Process (RUP) 
Extreme Programming (XP) 
Agile
Scrum

Основная цель архитектуры - определение 
требований, которые влияют на структуру 
приложения. Хорошо продуманная архитектура 
снижает бизнес-риски, связанные с созданием 
технического решения, и устанавливает мост между 
бизнес- и техническими требованиями


UML-диаграммы
прямоугольник, вверху назвиние класса, далее свойства +паблик -протектед(если нужен конструктор)б методы 
print(): void - не принимает, не возвраает 
getName(): str
setAge(int): void

зависимости если изменится один класс, надо менять другой
композиция - закрашенный ромб - при исчезновении зависимого класса пропадают и компоненты от которых от зависит, создаются внутри зависимого класса 
агрегация - незакрашенный ромб - при исчезновении зависимого класса, агрегаты остаюься, оздаются снаружи

мощность отношений:
0* - список обьектов, необчязательно чтобы там был хоть один обьект 
1n - массив обьектов, должен быть минимум 1

зависмость - простая стрелка, мощность не указывается 

реализация (наследования интерфейса) - прерывистая стрелка-треугольник

наследование - прямая линия (компощиция и агрегация)

конструктор принимает агрегатов

ПАТТЕРНЫ проектирования - это 21 паттерн, варианты решения стандартных задач
	структурные 
	поведенческие 
	порождающие
адаптеры декораторы - помогают при невозможности исправить код
фабричный - стуктурный

3 столпа ООП: наследование инкапсуляция полиморфизм 

SOLID 
	SPR single responsibility principle Принцип единственной ответственности (SRP) — это принцип ООП, обозначающий, что каждый объект должен иметь одну ответственность и эта ответственность должна быть полностью инкапсулирована в класс. Все его поведения должны быть направлены исключительно на обеспечение этой ответственности. 
		Не должно быть 2 причин изменения класса
	OCP open/close principle принцип открытости-закрытости. открыт для расширения и закрыт для модификации
	LSP Liscov principle потомки должны сохранять функционал своих родителей, принцип обратной совместимости
	ISP разделение интерфейсов. узкоспециализированные интерфейсы
	DIP модули высокого уровня не должны зависить от модулей низкого,  абстракция не должна зависеть от деталей, а детали от абстракции зависят






