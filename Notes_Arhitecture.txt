Архитектура ПО - совокупность важнейших решений об организации программной системы
	
	выбор структурный элементов системы и их интерфейсов, поведение при их взаимодействии
соединение выбранных элементов структуры 
общий аритектурный стиль
организация отдельных программных систем
комбинация аппаратного и ПО(системная архитектура)
организация информационных технологий в компаниях

Архитектура — это базовая организация системы, 
воплощённая в её компонентах, их отношениях между 
собой и с окружением, а также принципы, 
определяющие проектирование и развитие системы - — Стандарт IEEE 1471-2000

Типы архитектуры в IT-индустрии 
Business - Бизнес
Process - Процесс
Enterprise - Предприятие
Solution - Решение
Application - Приложение
System - Система


Жизненный цикл ПО – это непрерывный 
процесс, который начинается с момента 
принятия решения о необходимости его 
создания и заканчивается в момент его 
полного изъятия из эксплуатации. 

Организация проектов 
Rational Unified Process (RUP) 
Extreme Programming (XP) 
Agile
Scrum

Основная цель архитектуры - определение 
требований, которые влияют на структуру 
приложения. Хорошо продуманная архитектура 
снижает бизнес-риски, связанные с созданием 
технического решения, и устанавливает мост между 
бизнес- и техническими требованиями


UML-диаграммы
прямоугольник, вверху назвиние класса, далее свойства +паблик -протектед(если нужен конструктор)б методы 
print(): void - не принимает, не возвраает 
getName(): str
setAge(int): void

зависимости если изменится один класс, надо менять другой
композиция - закрашенный ромб - при исчезновении зависимого класса пропадают и компоненты от которых от зависит, создаются внутри зависимого класса 
агрегация - незакрашенный ромб - при исчезновении зависимого класса, агрегаты остаюься, оздаются снаружи

мощность отношений:
0* - список обьектов, необчязательно чтобы там был хоть один обьект 
1n - массив обьектов, должен быть минимум 1

зависмость - простая стрелка, мощность не указывается 

реализация (наследования интерфейса) - прерывистая стрелка-треугольник

наследование - прямая линия (компощиция и агрегация)

конструктор принимает агрегатов

ПАТТЕРНЫ проектирования - это 21 паттерн, варианты решения стандартных задач
	структурные 
	поведенческие 
	порождающие
адаптеры декораторы - помогают при невозможности исправить код
фабричный - стуктурный

3 столпа ООП: наследование инкапсуляция полиморфизм 

SOLID 
	SPR single responsibility principle Принцип единственной ответственности (SRP) — это принцип ООП, обозначающий, что каждый объект должен иметь одну ответственность и эта ответственность должна быть полностью инкапсулирована в класс. Все его поведения должны быть направлены исключительно на обеспечение этой ответственности. 
		Не должно быть 2 причин изменения класса
	OCP open/close principle принцип открытости-закрытости. открыт для расширения и закрыт для модификации
	LSP Liscov principle потомки должны сохранять функционал своих родителей, принцип обратной совместимости
	ISP разделение интерфейсов. узкоспециализированные интерфейсы
	DIP модули высокого уровня не должны зависить от модулей низкого,  абстракция не должна зависеть от деталей, а детали от абстракции зависят


горизонтальные уровни - data, logic, view 

чистая архитектура - Роберт Мартин - создатель принципов СОЛИД, отдельный подход к разработке ПО
	ядро: Entities - сущности, изменяются очень редко
	Use cases - варианты использования сущностей в центре
	Controllers-Gateways-Presenters - архитектурные каркасы (монолит, микросервисы)
	фреймворки, БД, WEB, UI, Devices - самая меняемая часть 
чем чаще изменяются сущности - тем дальше их надо отодвигать от центра
все зависимости направлены в сторону самых абстрактных, в сторону доменов(ядра)

Шестигранная архитектура:
уровень фреймворков - присутствуют порты - любые архитектурные границы - OpenAPI (Rest), интерфейсы, метаязыковая структура (JSON, XML, SQL), рефлексия 
						на порты подключаются адаптеры, классы, подключающие внешние сервисы (базы данных, облако, хранилище) - внешние (API, пользователь) и внутренние 
						
UseCase диаграмма - акторы, продумывание всех возмонных вариантов использования программы  https://online.visual-paradigm.com/
ERD диаграмма - это диаграмма тех записей, которые хранятся в БДю Таблицы БД  https://www.dbdesigner.net/

MVP - model(БД) view(фронтенд) Controller(бэкэнд)
	controler - проверяет данные от view к model
MVP - model view presenter (представитель) контролирует не только запрос к модели, а и от модели. можно ввести несколько моделей
MVVM - model view viewmodel - создается зеркало, туда копируется БД. если прерывается соединение с БД, то работы с данными ведутся в зекрале, а копируются в БД, когда появтся соединение 

ИНТЕРНЕТ
стек протоколов
Ethernet(физическая связь)/
IP(связь сетевых узлов между собой)/
TCP UDP(протоколы, переносчики данных) первый при передаче данных гарантированно передаст все пакеты(протокол гарантированной доставки) медленнее. например для передачи документов, когда ничего нельзя терять 
	второй не гарантирует доставки всех пакетов, например для видео/
HTTP - протокол доступа по сети ghjnjrjk ljcnegf gj ctnb bynthytn  
Семиуровневая модель ISO - следование протоколов изучить уровни

интернет появился впервые во Франции, потом уже развил США. США-Франция-Англия

появилась разметка HTML, далее для стилизации CSS, 
IANA - организация, регламентирует протоколы и стандарта интернета
Страны соединены оптоволокном, кабелями и прочим. 13 DNS серверов в мире для определения ip адресов сайтовю
при введении адреса, браузер соединяется с ближайщим сервером DNS и получает ip для доступа
маршрутизаторы - знают о своих соседях, при подключении пакеты ими маршрутизируются по сети 

Подходы к разработке (техники):
Domain Driven Design - предметно ориентированное программирование - продукт пишется хорошо изучив участок для автоматизации и как та ведется раьота, чистая аржитектура делится на сегменты с передачей данных через точки интеграции ю ограничивается контекстю Основательные проекты  исходим из области использования 
PrDD - programming Driven Design - отсутствует домен. (например яндекс такси, которые начинают с нуля) иммет под собой единое лицо, принимает решения 
BDD - Behaviour Driven Development - изучение человека и его взаимодействие с продуктом. фокус группы, много сил на изучение и ориентир на человека 
UDD - use case Driven Design - когда продукт пишется исходя из запросов бизнеса 
FDD - Features Driven Development - опыт разработчика , проект собирается из готовых микросервисов программистов, быстрые сроки запуска 
PunDD - panic Driven Design - разработака через панику - стартапы, которые пишут продукт абы как, чтобы быстрее выпустить и получить деньги и потом перейти на вменяемый подход , быстрая скорость разработки 
TDD - test Driven Development - покрытие всего кода тестами. 

Микросервис - маленькая программа, которая подключается к контроллеру или интерфейcy(в зависимости от архитектуры )
ПОстроена на контейнерах и виртуализации
МИкросервисная архитектура - MSA простые удобные
следующий этап развития микросервисной архитектуры, сервис-ориентированная архитектура SOA - появляется ESB (брокер- программа, встраиваемая между вычислительными мощностями, регламентирует работу между сервером и клиентом через OpenApi, gRPS)

https://github.com/GoogleCloudPlatform/microservices-demo

Тесты - функциональные(проверка фич программы) и не функциональные (разные случаи работы приложения - расширяемость, масштабируемость)
Функциональные - 
первоначальные  (Альфа тестирование)
SMOKE - работает ли продукт (или конкретная фича) ообще
E2E - тестирование в среде (ИтуИ) приближение к реальности 
UAT - сдаточное тестирование отдается проект конкретному пользователю для тестрования 
A/B (АБ тестирование ) тестирование в группе - сначала пережается малой группе, потом большей и большей 
PinTest - тест информационной безопасности
регрессионное тестирование - накопление всех тестирований - точки тестов защищают работоспособность кода. в модели больше, в юз кейсах меньше, на краю совсем мало, потому что защищают уже устоявшийся написанный код. накопление тестов позволяет следить за целостностью кода. при изменении кода, пирамида из тестов рушится
 CI/CD - технология, основанная на регрессивном тестировании - методология постоянного деплоя. 
	разработчик вносид код в коовую базу, запускается CI автоматизированное тестирование - потом CD деплой. автоматика распространяет код на докеры. если где-то косяк, автоматическое тестирование откажет в деплое и код вернется на доработку 

pixso.net

Телеграмм преподавателя:https://t.me/AndreyPskov